openapi: 3.0.2
info:
    title: bookstore
    version: 1.0.0
    description: >-
        This is a sample server BookStore API
    contact:
      name: API Support
      url: https://italiancoders/support
      email: italiancoders@gmail.com
    license:
        name: Apache 2.0
        url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://italiancoders.it/v1
    description: Production server
  - url: https://italiancoders-qa.it/v1
    description: QA server

# Apply the security globally to all operations
security:
  - bearerAuth: []     
paths:
  /login:
    post:
      operationId: login
      # declare /login as public endpoint
      security: []
      tags:
        - Authentication
      description: >
        Obtain jwt token to access to authenticated APIs
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
        required: true
      responses:
        '200':
          description: The session object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          description: Login failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /books:
    get:
      operationId: findBooks
      tags:
        - Book
      description: >
        Find Books
      parameters:
        - name: offset
          in: query
          required: true
          description: The number of items to skip before starting to collect the result set
          schema:
            type: integer
            minimum: 0
        - name: limit
          in: query
          required: true
          description: The numbers of items to return
          schema:
            type: integer            
            minimum: 1
            maximum: 100
        - name: genre
          in: query
          description: genre of the book
          schema:
            $ref: '#/components/schemas/BookGenre'   
        - name: search
          in: query
          description: Free Search (example author name, book title)
          schema:
            type: string
            maxLength: 50
      responses:
        '200':
          description: The Books found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'                
        '401':
          $ref: '#/components/responses/UnauthorizedError'                
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    post:
      operationId: addBook
      tags:
        - Book
      description: Insert a book in the platform
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/xml:
            schema:
              $ref: '#/components/schemas/Book'               
        required: true
      responses:
        '201':
          description: Book Created      
          content:
          #content negotiation to support multiple media types
            application/json:
              schema:
                $ref: '#/components/schemas/Book'  
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'                
        '400':
          description: Unable to create a Book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'               
        '401':
          $ref: '#/components/responses/UnauthorizedError'                
components:
# 1) Define the security scheme type (HTTP bearer)
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      #Authorization: Bearer <token>
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    AccessToken:
      type: object
      properties:
        accessToken:
          type: string             
        expiresAt: 
          type: string
          format: date-time
      required:
         - accessToken
         - expiresAt
      example:
        accessToken: xuhwiuhwidhhdwuwihduh
        expiresAt: 2018-09-15T15:53:00+02:00        
    Error:
      description: Error Details
      #custom property
      x-docs-additionalinfo: error_table.html
      properties:
        code:
          type: string             
        message: 
          type: string
          format: date-time
      required: 
         - code
         - message
      example:
        code: 1010
        message: Invalid User
    Author:
      description: Author Infos related a Book
      properties:
        fullname:
          type: string
          minLength: 3
          maxLength: 30          
        country:
          description: Nationality of the author
          type: string
          minLength: 3
          maxLength: 30
        birthYear:
          type: string
          format: date
        gender:
          description: gender of the author if it is specified
          type: string
          enum:
            - MALE
            - FEMALE
            - UNDEFINED
      required: 
         - fullname
      example:
        fullname: Luigi Pirandello
        country: Italy
        birthYear: 1986-06-28
        gender: MALE
    BookGenre:
        description: Genre categories of a book
        enum:
           - FANTASY
           - HORROR
           - CLASSIC
           - HOMOR
           - OTHER
        type: string
        example: CLASSIC        
    Book:
      description: Author Infos related a Book
      properties:
        id:
          description: Unique Id of the book calculated by the system
          type: integer
          format: int64
          readOnly: true
        title:
          description: Title Of the Book
          type: string
          minLength: 3
          maxLength: 50          
        totalPages:
          description: No of pages
          type: integer
          format: int32
        publishingHouse:
          description: Publishing House of the book
          type: string
        genre:
          $ref: '#/components/schemas/BookGenre'
        author:
          $ref: '#/components/schemas/Author'          
      required: 
         - id
         - title
         - totalPages
         - publishingHouse
         - author
      example:
        id: 1
        title: Il fu Mattia Pascal
        totalPages: 328
        publishingHouse: Mondadori
        author:
          fullname: Luigi Pirandello
          country: Italy
          birthYear: 1986-06-28
          gender: MALE